Search.setIndex({"docnames": ["example_cvffnn_1", "example_cvrbf_1", "example_fcrbf_1", "example_ptrbf_1", "example_ptrbf_2", "example_scffnn_1", "index", "modules", "rosenpy", "rosenpy.model", "rosenpy.utils"], "filenames": ["example_cvffnn_1.rst", "example_cvrbf_1.rst", "example_fcrbf_1.rst", "example_ptrbf_1.rst", "example_ptrbf_2.rst", "example_scffnn_1.rst", "index.rst", "modules.rst", "rosenpy.rst", "rosenpy.model.rst", "rosenpy.utils.rst"], "titles": ["example_cvffnn_1 module", "example_cvrbf_1 module", "example_fcrbf_1 module", "example_ptrbf_1 module", "example_ptrbf_2 module", "example_scffnn_1 module", "Welcome to RosenPy\u2019s documentation!", "rosenpy", "rosenpy package", "rosenpy.model package", "rosenpy.utils package"], "terms": {"rosenpi": [0, 1, 2, 3, 4, 5], "an": [0, 1, 2, 3, 4, 5, 9, 10], "open": [0, 1, 2, 3, 4, 5, 9, 10], "sourc": [0, 1, 2, 3, 4, 5, 9, 10], "python": [0, 1, 2, 3, 4, 5, 6, 9, 10], "framework": [0, 1, 2, 3, 4, 5, 6, 9, 10], "complex": [0, 1, 2, 3, 4, 5, 6, 9, 10], "valu": [0, 1, 2, 3, 4, 5, 6, 9, 10], "neural": [0, 1, 2, 3, 4, 5, 6, 9, 10], "network": [0, 1, 2, 3, 4, 5, 6, 9, 10], "copyright": [0, 1, 2, 3, 4, 5, 9, 10], "A": [0, 1, 2, 3, 4, 5, 6, 9, 10], "cruz": [0, 1, 2, 3, 4, 5, 9, 10], "k": [0, 1, 2, 3, 4, 5, 9, 10], "": [0, 1, 2, 3, 4, 5, 9, 10], "mayer": [0, 1, 2, 3, 4, 5, 9, 10], "d": [0, 1, 2, 3, 4, 5, 9, 10], "arant": [0, 1, 2, 3, 4, 5, 9, 10], "licens": [0, 1, 2, 3, 4, 5, 9, 10], "thi": [0, 1, 2, 3, 4, 5, 8, 9, 10], "file": [0, 1, 2, 3, 4, 5, 8, 9, 10], "i": [0, 1, 2, 3, 4, 5, 9, 10], "part": [0, 1, 2, 3, 4, 5, 9, 10], "distribut": [0, 1, 2, 3, 4, 5, 9, 10], "under": [0, 1, 2, 3, 4, 5, 9, 10], "term": [0, 1, 2, 3, 4, 5, 9, 10], "gnu": [0, 1, 2, 3, 4, 5, 9, 10], "gener": [0, 1, 2, 3, 4, 5, 9, 10], "public": [0, 1, 2, 3, 4, 5, 9, 10], "publish": [0, 1, 2, 3, 4, 5, 9, 10], "free": [0, 1, 2, 3, 4, 5, 9, 10], "softwar": [0, 1, 2, 3, 4, 5, 9, 10], "foundat": [0, 1, 2, 3, 4, 5, 9, 10], "either": [0, 1, 2, 3, 4, 5, 9, 10], "version": [0, 1, 2, 3, 4, 5, 9, 10], "3": [0, 1, 2, 3, 4, 5, 9, 10], "your": [0, 1, 2, 3, 4, 5, 9, 10], "option": [0, 1, 2, 3, 4, 5, 9, 10], "ani": [0, 1, 2, 3, 4, 5, 9, 10], "later": [0, 1, 2, 3, 4, 5, 9, 10], "For": [0, 1, 2, 3, 4, 5, 9, 10], "addit": [0, 1, 2, 3, 4, 5, 6, 9, 10], "inform": [0, 1, 2, 3, 4, 5, 9, 10], "pleas": [0, 1, 2, 3, 4, 5, 9, 10], "readm": [0, 1, 2, 3, 4, 5, 9, 10], "md": [0, 1, 2, 3, 4, 5, 9, 10], "hope": [0, 1, 2, 3, 4, 5, 9, 10], "us": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10], "everi": [0, 2, 5, 9, 10], "user": [0, 2, 5, 6, 9, 10], "without": [0, 1, 2, 3, 4, 5, 9, 10], "warranti": [0, 1, 2, 3, 4, 5, 9, 10], "even": [0, 1, 2, 3, 4, 5, 9, 10], "impli": [0, 1, 2, 3, 4, 5, 9, 10], "merchant": [0, 1, 2, 3, 4, 5, 9, 10], "fit": [0, 1, 2, 3, 4, 5, 8, 9, 10], "FOR": [0, 1, 2, 3, 4, 5, 9, 10], "particular": [0, 1, 2, 3, 4, 5, 9, 10], "purpos": [0, 1, 2, 3, 4, 5, 9, 10], "see": [0, 1, 2, 3, 4, 5, 9, 10], "more": [0, 1, 2, 3, 4, 5, 9, 10], "detail": [0, 1, 2, 3, 4, 5, 9, 10], "you": [0, 1, 2, 3, 4, 5, 9, 10], "should": [0, 1, 2, 3, 4, 5, 9, 10], "have": [0, 1, 2, 3, 4, 5, 9, 10], "receiv": [0, 1, 2, 3, 4, 5, 9, 10], "copi": [0, 1, 2, 3, 4, 5, 9, 10], "along": [0, 1, 2, 3, 4, 5, 9, 10], "If": [0, 1, 2, 3, 4, 5, 9, 10], "http": [0, 1, 2, 3, 4, 5, 9, 10], "www": [0, 1, 2, 3, 4, 5, 9, 10], "org": [0, 1, 2, 3, 4, 5, 9, 10], "set_data": [0, 1, 2, 3, 4, 5, 6], "set": [0, 1, 2, 3, 4, 5, 9, 10], "up": [0, 1, 2, 3, 4, 5], "data": [0, 1, 2, 3, 4, 5, 9, 10], "train": [0, 1, 2, 3, 4, 5, 6, 9, 10], "return": [0, 1, 2, 3, 4, 5, 10], "tupl": [0, 1, 2, 3, 4, 5, 9], "contain": [0, 1, 2, 3, 4, 5, 9], "normal": [0, 1, 2, 3, 4, 5, 9, 10], "input": [0, 1, 2, 3, 4, 5, 9, 10], "output": [0, 1, 2, 3, 4, 5, 9, 10], "dataset": [0, 1, 2, 3, 4, 5, 10], "type": [0, 1, 2, 3, 4, 5, 9, 10], "librari": 6, "written": 6, "incorpor": 6, "cvnn": [6, 9], "cv": 6, "ffnn": 6, "feedforward": [6, 8, 9, 10], "sc": 6, "split": [6, 9, 10], "rbfnn": 6, "com": 6, "plex": 6, "radial": [6, 9, 10], "basi": [6, 9, 10], "function": [6, 9, 10], "fc": 6, "fulli": [6, 9], "pt": 6, "deep": [6, 9], "phase": [6, 9], "transmitt": [6, 9], "It": 6, "enabl": 6, "properti": 6, "intrins": 6, "l2": [6, 9, 10], "regular": [6, 9, 10], "optim": [6, 8, 9, 10], "earli": 6, "stop": 6, "mini": 6, "batch": [6, 9, 10], "learn": [6, 9, 10], "rate": [6, 9, 10], "decai": [6, 9, 10], "python3": 6, "6": [6, 10], "numpi": [6, 9, 10], "easi": 6, "ha": 6, "fast": 6, "curv": 6, "end": 6, "implement": [6, 9, 10], "one": [6, 10], "most": 6, "popular": 6, "program": 6, "languag": 6, "avail": [6, 10], "todai": 6, "addition": 6, "sever": 6, "aid": 6, "predict": [6, 8, 9, 10], "problem": 6, "In": 6, "api": 6, "consist": 6, "straightforward": 6, "extens": 6, "simpl": 6, "structur": [6, 9], "support": 6, "five": 6, "differ": [6, 9], "can": [6, 9], "easili": 6, "model": [6, 7, 8], "configur": [6, 9], "hyperparamet": 6, "example_cvffnn_1": 6, "modul": [6, 7], "example_cvrbf_1": 6, "example_fcrbf_1": 6, "example_ptrbf_1": 6, "example_ptrbf_2": 6, "example_scffnn_1": 6, "packag": [6, 7], "index": 6, "search": 6, "page": 6, "subpackag": 7, "submodul": [7, 8], "cvffnn": [7, 8], "cvrbfnn": [7, 8], "fcrbfnn": [7, 8], "ptrbfnnc": [7, 8], "rp_layer": [7, 8], "rp_nn": [7, 8], "rp_optim": [7, 8], "scffnn": [7, 8], "content": 7, "util": [7, 8, 9], "act_func": [7, 8], "batch_gen_func": [7, 8, 9], "cost_func": [7, 8, 9], "decay_func": [7, 8, 9], "init_func": [7, 8, 9], "plot": [7, 8], "reg_func": [7, 8], "select_modul": [7, 8], "accuraci": [8, 9], "add_lay": [8, 9], "backprop": [8, 9], "convert_data": [8, 9], "denormalize_output": [8, 9], "get_histori": [8, 9], "normalize_data": [8, 9], "update_learning_r": [8, 9], "verify_input": [8, 9], "ptrbfnn": [8, 9], "layer": [8, 9], "neuralnetwork": [8, 9], "amsgrad": [8, 9], "set_modul": [8, 9], "update_paramet": [8, 9], "adagrad": [8, 9], "adam": [8, 9], "adamax": [8, 9], "cvamsgrad": [8, 9], "cvadagrad": [8, 9], "cvadam": [8, 9], "cvadamax": [8, 9], "cvnadam": [8, 9], "cvrmsprop": [8, 9], "gradientdesc": [8, 9], "nadam": [8, 9], "rmsprop": [8, 9], "samsgrad": [8, 9], "aco": [8, 10], "asin": [8, 10], "asinh": [8, 10], "atan": [8, 10], "atanh": [8, 10], "linear": [8, 10], "sech": [8, 10], "sin": [8, 10], "sinh": [8, 10], "split_complex": [8, 10], "tan": [8, 10], "tanh": [8, 9, 10], "batch_sequenti": [8, 9, 10], "batch_shuffl": [8, 10], "mse": [8, 9, 10], "exponential_decai": [8, 10], "none_decai": [8, 9, 10], "staircas": [8, 10], "time_based_decai": [8, 10], "glorot_norm": [8, 10], "glorot_uniform": [8, 10], "ones": [8, 9, 10], "ones_r": [8, 9, 10], "opt_conv_ptrbf_weight": [8, 10], "opt_crbf_gamma": [8, 9, 10], "opt_crbf_weight": [8, 9, 10], "opt_ptrbf_gamma": [8, 9, 10], "opt_ptrbf_weight": [8, 9, 10], "random_norm": [8, 9, 10], "random_uniform": [8, 10], "rbf_default": [8, 9, 10], "ru_gamma_ptrbf": [8, 10], "ru_weights_ptrbf": [8, 10], "zero": [8, 9, 10], "zeros_r": [8, 10], "classification_predict": [8, 10], "dsa": [8, 10], "make_spir": [8, 10], "l2_regular": [8, 10], "split_set": [8, 10], "initi": [8, 9, 10], "expos": 8, "main": 8, "extern": 8, "class": 9, "patienc": 9, "inf": 9, "gpu_en": 9, "fals": [9, 10], "base": [9, 10], "handl": [9, 10], "backpropag": [9, 10], "oper": [9, 10], "y": [9, 10], "y_pred": [9, 10], "comput": [9, 10], "arrai": [9, 10], "like": [9, 10], "The": [9, 10], "true": 9, "label": 9, "target": [9, 10], "float": [9, 10], "percentag": 9, "neuron": [9, 10], "ishap": 9, "0": [9, 10], "weights_initi": 9, "bias_initi": 9, "activ": [9, 10], "weights_rat": 9, "001": 9, "biases_r": 9, "reg_strength": [9, 10], "lambda_init": [9, 10], "1": [9, 10], "lr_decay_method": 9, "lr_decay_r": 9, "lr_decay_step": 9, "none": [9, 10], "add": 9, "int": [9, 10], "number": [9, 10], "shape": [9, 10], "default": [9, 10], "weight": [9, 10], "bias": 9, "strength": [9, 10], "lambda": [9, 10], "method": [9, 10], "which": [9, 10], "step": [9, 10], "after": 9, "object": [9, 10], "e": [9, 10], "g": [9, 10], "cupi": [9, 10], "epoch": [9, 10], "perform": [9, 10], "from": [9, 10], "current": [9, 10], "convert": 9, "appropri": 9, "format": 9, "backend": [9, 10], "normalized_output_data": 9, "mean": [9, 10], "std_dev": 9, "denorm": 9, "provid": 9, "standard": 9, "deviat": 9, "input_data": 9, "feed": 9, "final": 9, "x_train": [9, 10], "y_train": [9, 10], "x_val": 9, "y_val": 9, "100": 9, "verbos": 9, "10": 9, "batch_gen": 9, "batch_siz": [9, 10], "valid": 9, "control": [9, 10], "process": [9, 10], "dure": 9, "size": [9, 10], "specifi": 9, "histori": 9, "dict": 9, "dictionari": 9, "x": [9, 10], "statu": 9, "given": [9, 10], "updat": 9, "all": [9, 10], "verifi": 9, "specif": 9, "includ": [9, 10], "ad": 9, "deriv": [9, 10], "oshap": 9, "sigma_initi": 9, "gamma_initi": 9, "gamma_r": 9, "01": 9, "sigma_r": 9, "sigma": 9, "gamma": [9, 10], "fed": 9, "pass": 9, "construct": 9, "kernel_initi": 9, "kernel_s": 9, "categori": 9, "layer_typ": 9, "respons": 9, "append": 9, "new": 9, "connect": 9, "convolut": [9, 10], "depend": 9, "hidden": 9, "first": 9, "repres": [9, 10], "featur": [9, 10], "appli": [9, 10], "over": 9, "time": [9, 10], "kernel": 9, "transient": 9, "steadi": 9, "state": 9, "onli": 9, "str": 9, "conv": 9, "doe": 9, "modifi": 9, "note": 9, "self": 9, "list": 9, "sequenc": 9, "ar": 9, "each": [9, 10], "gradient": [9, 10], "loss": 9, "respect": 9, "ndarrai": 9, "varieti": 9, "its": [9, 10], "abstract": 9, "wrap": 9, "superclass": 9, "beta": 9, "beta1": 9, "9": 9, "beta2": 9, "999": 9, "epsilon": 9, "1e": 9, "08": 9, "algorithm": [9, 10], "variant": 9, "improv": 9, "converg": 9, "certain": 9, "case": 9, "keep": 9, "track": 9, "maximum": 9, "past": 9, "squar": [9, 10], "xp": [9, 10], "matrix": [9, 10], "learning_r": [9, 10], "mt": 9, "vt": 9, "ut": 9, "same": 9, "parent": 9, "moment": 9, "estim": 9, "adapt": 9, "placehold": 9, "subclass": 9, "second": 9, "third": 9, "descent": [9, 10], "defin": 9, "common": 9, "inherit": 9, "execut": 9, "arc": 10, "cosin": 10, "element": 10, "wise": 10, "paramet": 10, "typic": 10, "np": 10, "cp": 10, "array_lik": 10, "bool": 10, "whether": 10, "sine": 10, "invers": 10, "hyperbol": 10, "tangent": 10, "also": 10, "known": 10, "ident": 10, "secant": 10, "separ": 10, "real": 10, "imaginari": 10, "compon": 10, "both": 10, "result": 10, "sequenti": 10, "n_sampl": 10, "n_input": 10, "vector": 10, "where": 10, "sampl": 10, "n_output": 10, "desir": 10, "equal": 10, "stochast": 10, "sgd": 10, "x_batch": 10, "n_batch": 10, "y_batch": 10, "shuffl": 10, "calcul": 10, "error": 10, "between": 10, "decay_r": 10, "decay_step": 10, "exponenti": 10, "speed": 10, "origin": 10, "formula": 10, "row": 10, "col": 10, "glorot": 10, "column": 10, "uniform": 10, "adjust": 10, "crbf": 10, "random": 10, "binari": 10, "is_binari": 10, "nn": 10, "threshold": 10, "figsiz": 10, "12": 10, "15": 10, "cmap": 10, "matplotlib": 10, "color": 10, "listedcolormap": 10, "n_class": 10, "2": 10, "radiu": 10, "lap": 10, "nois": 10, "random_st": 10, "factor": 10, "use_gpu": 10, "cpu": 10, "gpu": 10, "code": 10, "flag": 10, "indic": 10, "acceler": 10, "request": 10, "otherwis": 10, "train_siz": 10, "7": 10, "test": 10, "proport": 10, "seed": 10, "x_test": 10, "y_test": 10}, "objects": {"": [[0, 0, 0, "-", "example_cvffnn_1"], [1, 0, 0, "-", "example_cvrbf_1"], [2, 0, 0, "-", "example_fcrbf_1"], [3, 0, 0, "-", "example_ptrbf_1"], [4, 0, 0, "-", "example_ptrbf_2"], [5, 0, 0, "-", "example_scffnn_1"], [8, 0, 0, "-", "rosenpy"]], "example_cvffnn_1": [[0, 1, 1, "", "set_data"]], "example_cvrbf_1": [[1, 1, 1, "", "set_data"]], "example_fcrbf_1": [[2, 1, 1, "", "set_data"]], "example_ptrbf_1": [[3, 1, 1, "", "set_data"]], "example_ptrbf_2": [[4, 1, 1, "", "set_data"]], "example_scffnn_1": [[5, 1, 1, "", "set_data"]], "rosenpy": [[9, 0, 0, "-", "model"], [10, 0, 0, "-", "utils"]], "rosenpy.model": [[9, 2, 1, "", "AMSGrad"], [9, 2, 1, "", "Adam"], [9, 2, 1, "", "CVAMSGrad"], [9, 2, 1, "", "CVAdam"], [9, 2, 1, "", "CVFFNN"], [9, 2, 1, "", "CVNadam"], [9, 2, 1, "", "CVRBFNN"], [9, 2, 1, "", "FCRBFNN"], [9, 2, 1, "", "GradientDescent"], [9, 2, 1, "", "Layer"], [9, 2, 1, "", "Nadam"], [9, 2, 1, "", "NeuralNetwork"], [9, 2, 1, "", "Optimizer"], [9, 2, 1, "", "SCFFNN"], [9, 0, 0, "-", "cvffnn"], [9, 0, 0, "-", "cvrbfnn"], [9, 0, 0, "-", "fcrbfnn"], [9, 0, 0, "-", "ptrbfnnc"], [9, 0, 0, "-", "rp_layer"], [9, 0, 0, "-", "rp_nn"], [9, 0, 0, "-", "rp_optimizer"], [9, 0, 0, "-", "scffnn"]], "rosenpy.model.AMSGrad": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.Adam": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.CVAMSGrad": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.CVAdam": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.CVFFNN": [[9, 3, 1, "", "accuracy"], [9, 3, 1, "", "add_layer"], [9, 3, 1, "", "backprop"], [9, 3, 1, "", "convert_data"], [9, 3, 1, "", "denormalize_outputs"], [9, 3, 1, "", "feedforward"], [9, 3, 1, "", "fit"], [9, 3, 1, "", "get_history"], [9, 3, 1, "", "normalize_data"], [9, 3, 1, "", "predict"], [9, 3, 1, "", "update_learning_rate"], [9, 3, 1, "", "verify_input"]], "rosenpy.model.CVNadam": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.CVRBFNN": [[9, 3, 1, "", "accuracy"], [9, 3, 1, "", "add_layer"], [9, 3, 1, "", "backprop"], [9, 3, 1, "", "convert_data"], [9, 3, 1, "", "denormalize_outputs"], [9, 3, 1, "", "feedforward"], [9, 3, 1, "", "fit"], [9, 3, 1, "", "get_history"], [9, 3, 1, "", "normalize_data"], [9, 3, 1, "", "predict"], [9, 3, 1, "", "update_learning_rate"], [9, 3, 1, "", "verify_input"]], "rosenpy.model.FCRBFNN": [[9, 3, 1, "", "accuracy"], [9, 3, 1, "", "add_layer"], [9, 3, 1, "", "backprop"], [9, 3, 1, "", "convert_data"], [9, 3, 1, "", "denormalize_outputs"], [9, 3, 1, "", "feedforward"], [9, 3, 1, "", "fit"], [9, 3, 1, "", "get_history"], [9, 3, 1, "", "normalize_data"], [9, 3, 1, "", "predict"], [9, 3, 1, "", "update_learning_rate"], [9, 3, 1, "", "verify_input"]], "rosenpy.model.GradientDescent": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.Nadam": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.NeuralNetwork": [[9, 3, 1, "", "accuracy"], [9, 3, 1, "", "add_layer"], [9, 3, 1, "", "convert_data"], [9, 3, 1, "", "denormalize_outputs"], [9, 3, 1, "", "fit"], [9, 3, 1, "", "get_history"], [9, 3, 1, "", "normalize_data"], [9, 3, 1, "", "predict"], [9, 3, 1, "", "update_learning_rate"], [9, 3, 1, "", "verify_input"]], "rosenpy.model.Optimizer": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.SCFFNN": [[9, 3, 1, "", "accuracy"], [9, 3, 1, "", "add_layer"], [9, 3, 1, "", "backprop"], [9, 3, 1, "", "convert_data"], [9, 3, 1, "", "denormalize_outputs"], [9, 3, 1, "", "feedforward"], [9, 3, 1, "", "fit"], [9, 3, 1, "", "get_history"], [9, 3, 1, "", "normalize_data"], [9, 3, 1, "", "predict"], [9, 3, 1, "", "update_learning_rate"], [9, 3, 1, "", "verify_input"]], "rosenpy.model.cvffnn": [[9, 2, 1, "", "CVFFNN"]], "rosenpy.model.cvffnn.CVFFNN": [[9, 3, 1, "", "accuracy"], [9, 3, 1, "", "add_layer"], [9, 3, 1, "", "backprop"], [9, 3, 1, "", "convert_data"], [9, 3, 1, "", "denormalize_outputs"], [9, 3, 1, "", "feedforward"], [9, 3, 1, "", "fit"], [9, 3, 1, "", "get_history"], [9, 3, 1, "", "normalize_data"], [9, 3, 1, "", "predict"], [9, 3, 1, "", "update_learning_rate"], [9, 3, 1, "", "verify_input"]], "rosenpy.model.cvrbfnn": [[9, 2, 1, "", "CVRBFNN"]], "rosenpy.model.cvrbfnn.CVRBFNN": [[9, 3, 1, "", "accuracy"], [9, 3, 1, "", "add_layer"], [9, 3, 1, "", "backprop"], [9, 3, 1, "", "convert_data"], [9, 3, 1, "", "denormalize_outputs"], [9, 3, 1, "", "feedforward"], [9, 3, 1, "", "fit"], [9, 3, 1, "", "get_history"], [9, 3, 1, "", "normalize_data"], [9, 3, 1, "", "predict"], [9, 3, 1, "", "update_learning_rate"], [9, 3, 1, "", "verify_input"]], "rosenpy.model.fcrbfnn": [[9, 2, 1, "", "FCRBFNN"]], "rosenpy.model.fcrbfnn.FCRBFNN": [[9, 3, 1, "", "accuracy"], [9, 3, 1, "", "add_layer"], [9, 3, 1, "", "backprop"], [9, 3, 1, "", "convert_data"], [9, 3, 1, "", "denormalize_outputs"], [9, 3, 1, "", "feedforward"], [9, 3, 1, "", "fit"], [9, 3, 1, "", "get_history"], [9, 3, 1, "", "normalize_data"], [9, 3, 1, "", "predict"], [9, 3, 1, "", "update_learning_rate"], [9, 3, 1, "", "verify_input"]], "rosenpy.model.ptrbfnnc": [[9, 2, 1, "", "PTRBFNN"]], "rosenpy.model.ptrbfnnc.PTRBFNN": [[9, 3, 1, "", "accuracy"], [9, 3, 1, "", "add_layer"], [9, 3, 1, "", "backprop"], [9, 3, 1, "", "convert_data"], [9, 3, 1, "", "denormalize_outputs"], [9, 3, 1, "", "feedforward"], [9, 3, 1, "", "fit"], [9, 3, 1, "", "get_history"], [9, 3, 1, "", "normalize_data"], [9, 3, 1, "", "predict"], [9, 3, 1, "", "update_learning_rate"], [9, 3, 1, "", "verify_input"]], "rosenpy.model.rp_layer": [[9, 2, 1, "", "Layer"]], "rosenpy.model.rp_nn": [[9, 2, 1, "", "NeuralNetwork"]], "rosenpy.model.rp_nn.NeuralNetwork": [[9, 3, 1, "", "accuracy"], [9, 3, 1, "", "add_layer"], [9, 3, 1, "", "convert_data"], [9, 3, 1, "", "denormalize_outputs"], [9, 3, 1, "", "fit"], [9, 3, 1, "", "get_history"], [9, 3, 1, "", "normalize_data"], [9, 3, 1, "", "predict"], [9, 3, 1, "", "update_learning_rate"], [9, 3, 1, "", "verify_input"]], "rosenpy.model.rp_optimizer": [[9, 2, 1, "", "AMSGrad"], [9, 2, 1, "", "AdaGrad"], [9, 2, 1, "", "Adam"], [9, 2, 1, "", "Adamax"], [9, 2, 1, "", "CVAMSGrad"], [9, 2, 1, "", "CVAdaGrad"], [9, 2, 1, "", "CVAdam"], [9, 2, 1, "", "CVAdamax"], [9, 2, 1, "", "CVNadam"], [9, 2, 1, "", "CVRMSprop"], [9, 2, 1, "", "GradientDescent"], [9, 2, 1, "", "Nadam"], [9, 2, 1, "", "Optimizer"], [9, 2, 1, "", "RMSprop"], [9, 2, 1, "", "SAMSGrad"]], "rosenpy.model.rp_optimizer.AMSGrad": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.rp_optimizer.AdaGrad": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.rp_optimizer.Adam": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.rp_optimizer.Adamax": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.rp_optimizer.CVAMSGrad": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.rp_optimizer.CVAdaGrad": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.rp_optimizer.CVAdam": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.rp_optimizer.CVAdamax": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.rp_optimizer.CVNadam": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.rp_optimizer.CVRMSprop": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.rp_optimizer.GradientDescent": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.rp_optimizer.Nadam": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.rp_optimizer.Optimizer": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.rp_optimizer.RMSprop": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.rp_optimizer.SAMSGrad": [[9, 3, 1, "", "set_module"], [9, 3, 1, "", "update_parameters"]], "rosenpy.model.scffnn": [[9, 2, 1, "", "SCFFNN"]], "rosenpy.model.scffnn.SCFFNN": [[9, 3, 1, "", "accuracy"], [9, 3, 1, "", "add_layer"], [9, 3, 1, "", "backprop"], [9, 3, 1, "", "convert_data"], [9, 3, 1, "", "denormalize_outputs"], [9, 3, 1, "", "feedforward"], [9, 3, 1, "", "fit"], [9, 3, 1, "", "get_history"], [9, 3, 1, "", "normalize_data"], [9, 3, 1, "", "predict"], [9, 3, 1, "", "update_learning_rate"], [9, 3, 1, "", "verify_input"]], "rosenpy.utils": [[10, 0, 0, "-", "act_func"], [10, 0, 0, "-", "batch_gen_func"], [10, 0, 0, "-", "cost_func"], [10, 0, 0, "-", "decay_func"], [10, 0, 0, "-", "init_func"], [10, 0, 0, "-", "plot"], [10, 0, 0, "-", "reg_func"], [10, 0, 0, "-", "select_module"], [10, 0, 0, "-", "utils"]], "rosenpy.utils.act_func": [[10, 1, 1, "", "acos"], [10, 1, 1, "", "asin"], [10, 1, 1, "", "asinh"], [10, 1, 1, "", "atan"], [10, 1, 1, "", "atanh"], [10, 1, 1, "", "linear"], [10, 1, 1, "", "sech"], [10, 1, 1, "", "sin"], [10, 1, 1, "", "sinh"], [10, 1, 1, "", "split_complex"], [10, 1, 1, "", "tan"], [10, 1, 1, "", "tanh"]], "rosenpy.utils.batch_gen_func": [[10, 1, 1, "", "batch_sequential"], [10, 1, 1, "", "batch_shuffle"]], "rosenpy.utils.cost_func": [[10, 1, 1, "", "mse"]], "rosenpy.utils.decay_func": [[10, 1, 1, "", "exponential_decay"], [10, 1, 1, "", "none_decay"], [10, 1, 1, "", "staircase"], [10, 1, 1, "", "time_based_decay"]], "rosenpy.utils.init_func": [[10, 1, 1, "", "glorot_normal"], [10, 1, 1, "", "glorot_uniform"], [10, 1, 1, "", "ones"], [10, 1, 1, "", "ones_real"], [10, 1, 1, "", "opt_conv_ptrbf_weights"], [10, 1, 1, "", "opt_crbf_gamma"], [10, 1, 1, "", "opt_crbf_weights"], [10, 1, 1, "", "opt_ptrbf_gamma"], [10, 1, 1, "", "opt_ptrbf_weights"], [10, 1, 1, "", "random_normal"], [10, 1, 1, "", "random_uniform"], [10, 1, 1, "", "rbf_default"], [10, 1, 1, "", "ru_gamma_ptrbf"], [10, 1, 1, "", "ru_weights_ptrbf"], [10, 1, 1, "", "zeros"], [10, 1, 1, "", "zeros_real"]], "rosenpy.utils.plot": [[10, 1, 1, "", "classification_predictions"], [10, 1, 1, "", "dsa"], [10, 1, 1, "", "make_spiral"]], "rosenpy.utils.reg_func": [[10, 1, 1, "", "l2_regularization"]], "rosenpy.utils.select_module": [[10, 1, 1, "", "select_module"]], "rosenpy.utils.utils": [[10, 1, 1, "", "split_set"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"]}, "titleterms": {"example_cvffnn_1": 0, "modul": [0, 1, 2, 3, 4, 5, 8, 9, 10], "example_cvrbf_1": 1, "example_fcrbf_1": 2, "example_ptrbf_1": 3, "example_ptrbf_2": 4, "example_scffnn_1": 5, "welcom": 6, "rosenpi": [6, 7, 8, 9, 10], "": 6, "document": 6, "what": 6, "i": 6, "depend": 6, "featur": 6, "benefit": 6, "content": [6, 8, 9, 10], "indic": 6, "tabl": 6, "packag": [8, 9, 10], "subpackag": 8, "model": 9, "submodul": [9, 10], "cvffnn": 9, "paramet": 9, "return": 9, "cvrbfnn": 9, "fcrbfnn": 9, "ptrbfnnc": 9, "rp_layer": 9, "rp_nn": 9, "rp_optim": 9, "scffnn": 9, "util": 10, "act_func": 10, "batch_gen_func": 10, "cost_func": 10, "decay_func": 10, "init_func": 10, "plot": 10, "reg_func": 10, "select_modul": 10}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"example_cvffnn_1 module": [[0, "module-example_cvffnn_1"]], "example_cvrbf_1 module": [[1, "module-example_cvrbf_1"]], "example_fcrbf_1 module": [[2, "module-example_fcrbf_1"]], "example_ptrbf_1 module": [[3, "module-example_ptrbf_1"]], "example_ptrbf_2 module": [[4, "module-example_ptrbf_2"]], "example_scffnn_1 module": [[5, "module-example_scffnn_1"]], "Welcome to RosenPy\u2019s documentation!": [[6, "welcome-to-rosenpy-s-documentation"]], "What is RosenPy?": [[6, "what-is-rosenpy"]], "Dependencies": [[6, "dependencies"]], "Features and Benefits": [[6, "features-and-benefits"]], "Contents:": [[6, null]], "Indices and tables": [[6, "indices-and-tables"]], "rosenpy": [[7, "rosenpy"]], "rosenpy package": [[8, "rosenpy-package"]], "Subpackages": [[8, "subpackages"]], "Module contents": [[8, "module-rosenpy"], [9, "module-rosenpy.model"], [10, "module-rosenpy.utils"]], "rosenpy.model package": [[9, "rosenpy-model-package"]], "Submodules": [[9, "submodules"], [10, "submodules"]], "rosenpy.model.cvffnn module": [[9, "module-rosenpy.model.cvffnn"]], "Parameters:": [[9, "parameters"], [9, "id1"], [9, "id3"], [9, "id5"], [9, "id7"], [9, "id9"], [9, "id11"], [9, "id12"], [9, "id13"], [9, "id15"], [9, "id17"], [9, "id18"], [9, "id20"], [9, "id22"], [9, "id24"], [9, "id26"], [9, "id28"], [9, "id30"], [9, "id31"], [9, "id32"], [9, "id34"], [9, "id36"], [9, "id37"], [9, "id39"], [9, "id41"], [9, "id43"], [9, "id45"], [9, "id47"], [9, "id49"], [9, "id50"], [9, "id51"], [9, "id53"], [9, "id55"], [9, "id57"], [9, "id59"], [9, "id61"], [9, "id63"], [9, "id64"], [9, "id65"], [9, "id67"], [9, "id69"], [9, "id71"], [9, "id73"], [9, "id75"], [9, "id77"], [9, "id78"], [9, "id79"], [9, "id80"], [9, "id82"], [9, "id83"], [9, "id85"], [9, "id86"], [9, "id88"], [9, "id89"], [9, "id91"], [9, "id93"], [9, "id94"], [9, "id96"], [9, "id97"], [9, "id99"], [9, "id100"], [9, "id102"], [9, "id103"], [9, "id105"], [9, "id106"], [9, "id108"], [9, "id109"], [9, "id111"], [9, "id112"], [9, "id114"], [9, "id115"], [9, "id117"], [9, "id118"], [9, "id120"], [9, "id121"], [9, "id123"], [9, "id124"], [9, "id126"], [9, "id128"], [9, "id129"], [9, "id130"], [9, "id132"], [9, "id134"], [9, "id136"], [9, "id138"], [9, "id140"], [9, "id142"], [9, "id143"], [9, "id144"], [9, "id145"], [9, "id147"], [9, "id148"], [9, "id150"], [9, "id152"], [9, "id153"], [9, "id155"], [9, "id156"], [9, "id158"], [9, "id160"], [9, "id162"], [9, "id164"], [9, "id166"], [9, "id168"], [9, "id170"], [9, "id171"], [9, "id172"], [9, "id173"], [9, "id175"], [9, "id177"], [9, "id179"], [9, "id180"], [9, "id182"], [9, "id184"], [9, "id186"], [9, "id188"], [9, "id190"], [9, "id192"], [9, "id193"], [9, "id194"], [9, "id196"], [9, "id198"], [9, "id199"], [9, "id201"], [9, "id203"], [9, "id205"], [9, "id207"], [9, "id209"], [9, "id211"], [9, "id212"], [9, "id213"], [9, "id214"], [9, "id216"], [9, "id217"], [9, "id219"], [9, "id221"], [9, "id223"], [9, "id225"], [9, "id227"], [9, "id229"], [9, "id231"], [9, "id232"], [9, "id233"], [9, "id234"], [9, "id236"], [9, "id238"], [9, "id239"], [9, "id240"], [9, "id242"], [9, "id244"], [9, "id246"], [9, "id248"], [9, "id250"], [9, "id252"], [9, "id253"]], "Returns:": [[9, "returns"], [9, "id2"], [9, "id4"], [9, "id6"], [9, "id8"], [9, "id10"], [9, "id14"], [9, "id16"], [9, "id19"], [9, "id21"], [9, "id23"], [9, "id25"], [9, "id27"], [9, "id29"], [9, "id33"], [9, "id35"], [9, "id38"], [9, "id40"], [9, "id42"], [9, "id44"], [9, "id46"], [9, "id48"], [9, "id52"], [9, "id54"], [9, "id56"], [9, "id58"], [9, "id60"], [9, "id62"], [9, "id66"], [9, "id68"], [9, "id70"], [9, "id72"], [9, "id74"], [9, "id76"], [9, "id81"], [9, "id84"], [9, "id87"], [9, "id90"], [9, "id92"], [9, "id95"], [9, "id98"], [9, "id101"], [9, "id104"], [9, "id107"], [9, "id110"], [9, "id113"], [9, "id116"], [9, "id119"], [9, "id122"], [9, "id125"], [9, "id127"], [9, "id131"], [9, "id133"], [9, "id135"], [9, "id137"], [9, "id139"], [9, "id141"], [9, "id146"], [9, "id149"], [9, "id151"], [9, "id154"], [9, "id157"], [9, "id159"], [9, "id161"], [9, "id163"], [9, "id165"], [9, "id167"], [9, "id169"], [9, "id174"], [9, "id176"], [9, "id178"], [9, "id181"], [9, "id183"], [9, "id185"], [9, "id187"], [9, "id189"], [9, "id191"], [9, "id195"], [9, "id197"], [9, "id200"], [9, "id202"], [9, "id204"], [9, "id206"], [9, "id208"], [9, "id210"], [9, "id215"], [9, "id218"], [9, "id220"], [9, "id222"], [9, "id224"], [9, "id226"], [9, "id228"], [9, "id230"], [9, "id235"], [9, "id237"], [9, "id241"], [9, "id243"], [9, "id245"], [9, "id247"], [9, "id249"], [9, "id251"]], "rosenpy.model.cvrbfnn module": [[9, "module-rosenpy.model.cvrbfnn"]], "rosenpy.model.fcrbfnn module": [[9, "module-rosenpy.model.fcrbfnn"]], "rosenpy.model.ptrbfnnc module": [[9, "module-rosenpy.model.ptrbfnnc"]], "rosenpy.model.rp_layer module": [[9, "module-rosenpy.model.rp_layer"]], "rosenpy.model.rp_nn module": [[9, "module-rosenpy.model.rp_nn"]], "rosenpy.model.rp_optimizer module": [[9, "module-rosenpy.model.rp_optimizer"]], "rosenpy.model.scffnn module": [[9, "module-rosenpy.model.scffnn"]], "rosenpy.utils package": [[10, "rosenpy-utils-package"]], "rosenpy.utils.act_func module": [[10, "module-rosenpy.utils.act_func"]], "rosenpy.utils.batch_gen_func module": [[10, "module-rosenpy.utils.batch_gen_func"]], "rosenpy.utils.cost_func module": [[10, "module-rosenpy.utils.cost_func"]], "rosenpy.utils.decay_func module": [[10, "module-rosenpy.utils.decay_func"]], "rosenpy.utils.init_func module": [[10, "module-rosenpy.utils.init_func"]], "rosenpy.utils.plot module": [[10, "module-rosenpy.utils.plot"]], "rosenpy.utils.reg_func module": [[10, "module-rosenpy.utils.reg_func"]], "rosenpy.utils.select_module module": [[10, "module-rosenpy.utils.select_module"]], "rosenpy.utils.utils module": [[10, "module-rosenpy.utils.utils"]]}, "indexentries": {"example_cvffnn_1": [[0, "module-example_cvffnn_1"]], "module": [[0, "module-example_cvffnn_1"], [1, "module-example_cvrbf_1"], [2, "module-example_fcrbf_1"], [3, "module-example_ptrbf_1"], [4, "module-example_ptrbf_2"], [5, "module-example_scffnn_1"], [8, "module-rosenpy"], [9, "module-rosenpy.model"], [9, "module-rosenpy.model.cvffnn"], [9, "module-rosenpy.model.cvrbfnn"], [9, "module-rosenpy.model.fcrbfnn"], [9, "module-rosenpy.model.ptrbfnnc"], [9, "module-rosenpy.model.rp_layer"], [9, "module-rosenpy.model.rp_nn"], [9, "module-rosenpy.model.rp_optimizer"], [9, "module-rosenpy.model.scffnn"], [10, "module-rosenpy.utils"], [10, "module-rosenpy.utils.act_func"], [10, "module-rosenpy.utils.batch_gen_func"], [10, "module-rosenpy.utils.cost_func"], [10, "module-rosenpy.utils.decay_func"], [10, "module-rosenpy.utils.init_func"], [10, "module-rosenpy.utils.plot"], [10, "module-rosenpy.utils.reg_func"], [10, "module-rosenpy.utils.select_module"], [10, "module-rosenpy.utils.utils"]], "set_data() (in module example_cvffnn_1)": [[0, "example_cvffnn_1.set_data"]], "example_cvrbf_1": [[1, "module-example_cvrbf_1"]], "set_data() (in module example_cvrbf_1)": [[1, "example_cvrbf_1.set_data"]], "example_fcrbf_1": [[2, "module-example_fcrbf_1"]], "set_data() (in module example_fcrbf_1)": [[2, "example_fcrbf_1.set_data"]], "example_ptrbf_1": [[3, "module-example_ptrbf_1"]], "set_data() (in module example_ptrbf_1)": [[3, "example_ptrbf_1.set_data"]], "example_ptrbf_2": [[4, "module-example_ptrbf_2"]], "set_data() (in module example_ptrbf_2)": [[4, "example_ptrbf_2.set_data"]], "example_scffnn_1": [[5, "module-example_scffnn_1"]], "set_data() (in module example_scffnn_1)": [[5, "example_scffnn_1.set_data"]], "rosenpy": [[8, "module-rosenpy"]], "amsgrad (class in rosenpy.model)": [[9, "rosenpy.model.AMSGrad"]], "amsgrad (class in rosenpy.model.rp_optimizer)": [[9, "rosenpy.model.rp_optimizer.AMSGrad"]], "adagrad (class in rosenpy.model.rp_optimizer)": [[9, "rosenpy.model.rp_optimizer.AdaGrad"]], "adam (class in rosenpy.model)": [[9, "rosenpy.model.Adam"]], "adam (class in rosenpy.model.rp_optimizer)": [[9, "rosenpy.model.rp_optimizer.Adam"]], "adamax (class in rosenpy.model.rp_optimizer)": [[9, "rosenpy.model.rp_optimizer.Adamax"]], "cvamsgrad (class in rosenpy.model)": [[9, "rosenpy.model.CVAMSGrad"]], "cvamsgrad (class in rosenpy.model.rp_optimizer)": [[9, "rosenpy.model.rp_optimizer.CVAMSGrad"]], "cvadagrad (class in rosenpy.model.rp_optimizer)": [[9, "rosenpy.model.rp_optimizer.CVAdaGrad"]], "cvadam (class in rosenpy.model)": [[9, "rosenpy.model.CVAdam"]], "cvadam (class in rosenpy.model.rp_optimizer)": [[9, "rosenpy.model.rp_optimizer.CVAdam"]], "cvadamax (class in rosenpy.model.rp_optimizer)": [[9, "rosenpy.model.rp_optimizer.CVAdamax"]], "cvffnn (class in rosenpy.model)": [[9, "rosenpy.model.CVFFNN"]], "cvffnn (class in rosenpy.model.cvffnn)": [[9, "rosenpy.model.cvffnn.CVFFNN"]], "cvnadam (class in rosenpy.model)": [[9, "rosenpy.model.CVNadam"]], "cvnadam (class in rosenpy.model.rp_optimizer)": [[9, "rosenpy.model.rp_optimizer.CVNadam"]], "cvrbfnn (class in rosenpy.model)": [[9, "rosenpy.model.CVRBFNN"]], "cvrbfnn (class in rosenpy.model.cvrbfnn)": [[9, "rosenpy.model.cvrbfnn.CVRBFNN"]], "cvrmsprop (class in rosenpy.model.rp_optimizer)": [[9, "rosenpy.model.rp_optimizer.CVRMSprop"]], "fcrbfnn (class in rosenpy.model)": [[9, "rosenpy.model.FCRBFNN"]], "fcrbfnn (class in rosenpy.model.fcrbfnn)": [[9, "rosenpy.model.fcrbfnn.FCRBFNN"]], "gradientdescent (class in rosenpy.model)": [[9, "rosenpy.model.GradientDescent"]], "gradientdescent (class in rosenpy.model.rp_optimizer)": [[9, "rosenpy.model.rp_optimizer.GradientDescent"]], "layer (class in rosenpy.model)": [[9, "rosenpy.model.Layer"]], "layer (class in rosenpy.model.rp_layer)": [[9, "rosenpy.model.rp_layer.Layer"]], "nadam (class in rosenpy.model)": [[9, "rosenpy.model.Nadam"]], "nadam (class in rosenpy.model.rp_optimizer)": [[9, "rosenpy.model.rp_optimizer.Nadam"]], "neuralnetwork (class in rosenpy.model)": [[9, "rosenpy.model.NeuralNetwork"]], "neuralnetwork (class in rosenpy.model.rp_nn)": [[9, "rosenpy.model.rp_nn.NeuralNetwork"]], "optimizer (class in rosenpy.model)": [[9, "rosenpy.model.Optimizer"]], "optimizer (class in rosenpy.model.rp_optimizer)": [[9, "rosenpy.model.rp_optimizer.Optimizer"]], "ptrbfnn (class in rosenpy.model.ptrbfnnc)": [[9, "rosenpy.model.ptrbfnnc.PTRBFNN"]], "rmsprop (class in rosenpy.model.rp_optimizer)": [[9, "rosenpy.model.rp_optimizer.RMSprop"]], "samsgrad (class in rosenpy.model.rp_optimizer)": [[9, "rosenpy.model.rp_optimizer.SAMSGrad"]], "scffnn (class in rosenpy.model)": [[9, "rosenpy.model.SCFFNN"]], "scffnn (class in rosenpy.model.scffnn)": [[9, "rosenpy.model.scffnn.SCFFNN"]], "accuracy() (rosenpy.model.cvffnn method)": [[9, "rosenpy.model.CVFFNN.accuracy"]], "accuracy() (rosenpy.model.cvrbfnn method)": [[9, "rosenpy.model.CVRBFNN.accuracy"]], "accuracy() (rosenpy.model.fcrbfnn method)": [[9, "rosenpy.model.FCRBFNN.accuracy"]], "accuracy() (rosenpy.model.neuralnetwork method)": [[9, "rosenpy.model.NeuralNetwork.accuracy"]], "accuracy() (rosenpy.model.scffnn method)": [[9, "rosenpy.model.SCFFNN.accuracy"]], "accuracy() (rosenpy.model.cvffnn.cvffnn method)": [[9, "rosenpy.model.cvffnn.CVFFNN.accuracy"]], "accuracy() (rosenpy.model.cvrbfnn.cvrbfnn method)": [[9, "rosenpy.model.cvrbfnn.CVRBFNN.accuracy"]], "accuracy() (rosenpy.model.fcrbfnn.fcrbfnn method)": [[9, "rosenpy.model.fcrbfnn.FCRBFNN.accuracy"]], "accuracy() (rosenpy.model.ptrbfnnc.ptrbfnn method)": [[9, "rosenpy.model.ptrbfnnc.PTRBFNN.accuracy"]], "accuracy() (rosenpy.model.rp_nn.neuralnetwork method)": [[9, "rosenpy.model.rp_nn.NeuralNetwork.accuracy"]], "accuracy() (rosenpy.model.scffnn.scffnn method)": [[9, "rosenpy.model.scffnn.SCFFNN.accuracy"]], "add_layer() (rosenpy.model.cvffnn method)": [[9, "rosenpy.model.CVFFNN.add_layer"]], "add_layer() (rosenpy.model.cvrbfnn method)": [[9, "rosenpy.model.CVRBFNN.add_layer"]], "add_layer() (rosenpy.model.fcrbfnn method)": [[9, "rosenpy.model.FCRBFNN.add_layer"]], "add_layer() (rosenpy.model.neuralnetwork method)": [[9, "rosenpy.model.NeuralNetwork.add_layer"]], "add_layer() (rosenpy.model.scffnn method)": [[9, "rosenpy.model.SCFFNN.add_layer"]], "add_layer() (rosenpy.model.cvffnn.cvffnn method)": [[9, "rosenpy.model.cvffnn.CVFFNN.add_layer"]], "add_layer() (rosenpy.model.cvrbfnn.cvrbfnn method)": [[9, "rosenpy.model.cvrbfnn.CVRBFNN.add_layer"]], "add_layer() (rosenpy.model.fcrbfnn.fcrbfnn method)": [[9, "rosenpy.model.fcrbfnn.FCRBFNN.add_layer"]], "add_layer() (rosenpy.model.ptrbfnnc.ptrbfnn method)": [[9, "rosenpy.model.ptrbfnnc.PTRBFNN.add_layer"]], "add_layer() (rosenpy.model.rp_nn.neuralnetwork method)": [[9, "rosenpy.model.rp_nn.NeuralNetwork.add_layer"]], "add_layer() (rosenpy.model.scffnn.scffnn method)": [[9, "rosenpy.model.scffnn.SCFFNN.add_layer"]], "backprop() (rosenpy.model.cvffnn method)": [[9, "rosenpy.model.CVFFNN.backprop"]], "backprop() (rosenpy.model.cvrbfnn method)": [[9, "rosenpy.model.CVRBFNN.backprop"]], "backprop() (rosenpy.model.fcrbfnn method)": [[9, "rosenpy.model.FCRBFNN.backprop"]], "backprop() (rosenpy.model.scffnn method)": [[9, "rosenpy.model.SCFFNN.backprop"]], "backprop() (rosenpy.model.cvffnn.cvffnn method)": [[9, "rosenpy.model.cvffnn.CVFFNN.backprop"]], "backprop() (rosenpy.model.cvrbfnn.cvrbfnn method)": [[9, "rosenpy.model.cvrbfnn.CVRBFNN.backprop"]], "backprop() (rosenpy.model.fcrbfnn.fcrbfnn method)": [[9, "rosenpy.model.fcrbfnn.FCRBFNN.backprop"]], "backprop() (rosenpy.model.ptrbfnnc.ptrbfnn method)": [[9, "rosenpy.model.ptrbfnnc.PTRBFNN.backprop"]], "backprop() (rosenpy.model.scffnn.scffnn method)": [[9, "rosenpy.model.scffnn.SCFFNN.backprop"]], "convert_data() (rosenpy.model.cvffnn method)": [[9, "rosenpy.model.CVFFNN.convert_data"]], "convert_data() (rosenpy.model.cvrbfnn method)": [[9, "rosenpy.model.CVRBFNN.convert_data"]], "convert_data() (rosenpy.model.fcrbfnn method)": [[9, "rosenpy.model.FCRBFNN.convert_data"]], "convert_data() (rosenpy.model.neuralnetwork method)": [[9, "rosenpy.model.NeuralNetwork.convert_data"]], "convert_data() (rosenpy.model.scffnn method)": [[9, "rosenpy.model.SCFFNN.convert_data"]], "convert_data() (rosenpy.model.cvffnn.cvffnn method)": [[9, "rosenpy.model.cvffnn.CVFFNN.convert_data"]], "convert_data() (rosenpy.model.cvrbfnn.cvrbfnn method)": [[9, "rosenpy.model.cvrbfnn.CVRBFNN.convert_data"]], "convert_data() (rosenpy.model.fcrbfnn.fcrbfnn method)": [[9, "rosenpy.model.fcrbfnn.FCRBFNN.convert_data"]], "convert_data() (rosenpy.model.ptrbfnnc.ptrbfnn method)": [[9, "rosenpy.model.ptrbfnnc.PTRBFNN.convert_data"]], "convert_data() (rosenpy.model.rp_nn.neuralnetwork method)": [[9, "rosenpy.model.rp_nn.NeuralNetwork.convert_data"]], "convert_data() (rosenpy.model.scffnn.scffnn method)": [[9, "rosenpy.model.scffnn.SCFFNN.convert_data"]], "denormalize_outputs() (rosenpy.model.cvffnn method)": [[9, "rosenpy.model.CVFFNN.denormalize_outputs"]], "denormalize_outputs() (rosenpy.model.cvrbfnn method)": [[9, "rosenpy.model.CVRBFNN.denormalize_outputs"]], "denormalize_outputs() (rosenpy.model.fcrbfnn method)": [[9, "rosenpy.model.FCRBFNN.denormalize_outputs"]], "denormalize_outputs() (rosenpy.model.neuralnetwork method)": [[9, "rosenpy.model.NeuralNetwork.denormalize_outputs"]], "denormalize_outputs() (rosenpy.model.scffnn method)": [[9, "rosenpy.model.SCFFNN.denormalize_outputs"]], "denormalize_outputs() (rosenpy.model.cvffnn.cvffnn method)": [[9, "rosenpy.model.cvffnn.CVFFNN.denormalize_outputs"]], "denormalize_outputs() (rosenpy.model.cvrbfnn.cvrbfnn method)": [[9, "rosenpy.model.cvrbfnn.CVRBFNN.denormalize_outputs"]], "denormalize_outputs() (rosenpy.model.fcrbfnn.fcrbfnn method)": [[9, "rosenpy.model.fcrbfnn.FCRBFNN.denormalize_outputs"]], "denormalize_outputs() (rosenpy.model.ptrbfnnc.ptrbfnn method)": [[9, "rosenpy.model.ptrbfnnc.PTRBFNN.denormalize_outputs"]], "denormalize_outputs() (rosenpy.model.rp_nn.neuralnetwork method)": [[9, "rosenpy.model.rp_nn.NeuralNetwork.denormalize_outputs"]], "denormalize_outputs() (rosenpy.model.scffnn.scffnn method)": [[9, "rosenpy.model.scffnn.SCFFNN.denormalize_outputs"]], "feedforward() (rosenpy.model.cvffnn method)": [[9, "rosenpy.model.CVFFNN.feedforward"]], "feedforward() (rosenpy.model.cvrbfnn method)": [[9, "rosenpy.model.CVRBFNN.feedforward"]], "feedforward() (rosenpy.model.fcrbfnn method)": [[9, "rosenpy.model.FCRBFNN.feedforward"]], "feedforward() (rosenpy.model.scffnn method)": [[9, "rosenpy.model.SCFFNN.feedforward"]], "feedforward() (rosenpy.model.cvffnn.cvffnn method)": [[9, "rosenpy.model.cvffnn.CVFFNN.feedforward"]], "feedforward() (rosenpy.model.cvrbfnn.cvrbfnn method)": [[9, "rosenpy.model.cvrbfnn.CVRBFNN.feedforward"]], "feedforward() (rosenpy.model.fcrbfnn.fcrbfnn method)": [[9, "rosenpy.model.fcrbfnn.FCRBFNN.feedforward"]], "feedforward() (rosenpy.model.ptrbfnnc.ptrbfnn method)": [[9, "rosenpy.model.ptrbfnnc.PTRBFNN.feedforward"]], "feedforward() (rosenpy.model.scffnn.scffnn method)": [[9, "rosenpy.model.scffnn.SCFFNN.feedforward"]], "fit() (rosenpy.model.cvffnn method)": [[9, "rosenpy.model.CVFFNN.fit"]], "fit() (rosenpy.model.cvrbfnn method)": [[9, "rosenpy.model.CVRBFNN.fit"]], "fit() (rosenpy.model.fcrbfnn method)": [[9, "rosenpy.model.FCRBFNN.fit"]], "fit() (rosenpy.model.neuralnetwork method)": [[9, "rosenpy.model.NeuralNetwork.fit"]], "fit() (rosenpy.model.scffnn method)": [[9, "rosenpy.model.SCFFNN.fit"]], "fit() (rosenpy.model.cvffnn.cvffnn method)": [[9, "rosenpy.model.cvffnn.CVFFNN.fit"]], "fit() (rosenpy.model.cvrbfnn.cvrbfnn method)": [[9, "rosenpy.model.cvrbfnn.CVRBFNN.fit"]], "fit() (rosenpy.model.fcrbfnn.fcrbfnn method)": [[9, "rosenpy.model.fcrbfnn.FCRBFNN.fit"]], "fit() (rosenpy.model.ptrbfnnc.ptrbfnn method)": [[9, "rosenpy.model.ptrbfnnc.PTRBFNN.fit"]], "fit() (rosenpy.model.rp_nn.neuralnetwork method)": [[9, "rosenpy.model.rp_nn.NeuralNetwork.fit"]], "fit() (rosenpy.model.scffnn.scffnn method)": [[9, "rosenpy.model.scffnn.SCFFNN.fit"]], "get_history() (rosenpy.model.cvffnn method)": [[9, "rosenpy.model.CVFFNN.get_history"]], "get_history() (rosenpy.model.cvrbfnn method)": [[9, "rosenpy.model.CVRBFNN.get_history"]], "get_history() (rosenpy.model.fcrbfnn method)": [[9, "rosenpy.model.FCRBFNN.get_history"]], "get_history() (rosenpy.model.neuralnetwork method)": [[9, "rosenpy.model.NeuralNetwork.get_history"]], "get_history() (rosenpy.model.scffnn method)": [[9, "rosenpy.model.SCFFNN.get_history"]], "get_history() (rosenpy.model.cvffnn.cvffnn method)": [[9, "rosenpy.model.cvffnn.CVFFNN.get_history"]], "get_history() (rosenpy.model.cvrbfnn.cvrbfnn method)": [[9, "rosenpy.model.cvrbfnn.CVRBFNN.get_history"]], "get_history() (rosenpy.model.fcrbfnn.fcrbfnn method)": [[9, "rosenpy.model.fcrbfnn.FCRBFNN.get_history"]], "get_history() (rosenpy.model.ptrbfnnc.ptrbfnn method)": [[9, "rosenpy.model.ptrbfnnc.PTRBFNN.get_history"]], "get_history() (rosenpy.model.rp_nn.neuralnetwork method)": [[9, "rosenpy.model.rp_nn.NeuralNetwork.get_history"]], "get_history() (rosenpy.model.scffnn.scffnn method)": [[9, "rosenpy.model.scffnn.SCFFNN.get_history"]], "normalize_data() (rosenpy.model.cvffnn method)": [[9, "rosenpy.model.CVFFNN.normalize_data"]], "normalize_data() (rosenpy.model.cvrbfnn method)": [[9, "rosenpy.model.CVRBFNN.normalize_data"]], "normalize_data() (rosenpy.model.fcrbfnn method)": [[9, "rosenpy.model.FCRBFNN.normalize_data"]], "normalize_data() (rosenpy.model.neuralnetwork method)": [[9, "rosenpy.model.NeuralNetwork.normalize_data"]], "normalize_data() (rosenpy.model.scffnn method)": [[9, "rosenpy.model.SCFFNN.normalize_data"]], "normalize_data() (rosenpy.model.cvffnn.cvffnn method)": [[9, "rosenpy.model.cvffnn.CVFFNN.normalize_data"]], "normalize_data() (rosenpy.model.cvrbfnn.cvrbfnn method)": [[9, "rosenpy.model.cvrbfnn.CVRBFNN.normalize_data"]], "normalize_data() (rosenpy.model.fcrbfnn.fcrbfnn method)": [[9, "rosenpy.model.fcrbfnn.FCRBFNN.normalize_data"]], "normalize_data() (rosenpy.model.ptrbfnnc.ptrbfnn method)": [[9, "rosenpy.model.ptrbfnnc.PTRBFNN.normalize_data"]], "normalize_data() (rosenpy.model.rp_nn.neuralnetwork method)": [[9, "rosenpy.model.rp_nn.NeuralNetwork.normalize_data"]], "normalize_data() (rosenpy.model.scffnn.scffnn method)": [[9, "rosenpy.model.scffnn.SCFFNN.normalize_data"]], "predict() (rosenpy.model.cvffnn method)": [[9, "rosenpy.model.CVFFNN.predict"]], "predict() (rosenpy.model.cvrbfnn method)": [[9, "rosenpy.model.CVRBFNN.predict"]], "predict() (rosenpy.model.fcrbfnn method)": [[9, "rosenpy.model.FCRBFNN.predict"]], "predict() (rosenpy.model.neuralnetwork method)": [[9, "rosenpy.model.NeuralNetwork.predict"]], "predict() (rosenpy.model.scffnn method)": [[9, "rosenpy.model.SCFFNN.predict"]], "predict() (rosenpy.model.cvffnn.cvffnn method)": [[9, "rosenpy.model.cvffnn.CVFFNN.predict"]], "predict() (rosenpy.model.cvrbfnn.cvrbfnn method)": [[9, "rosenpy.model.cvrbfnn.CVRBFNN.predict"]], "predict() (rosenpy.model.fcrbfnn.fcrbfnn method)": [[9, "rosenpy.model.fcrbfnn.FCRBFNN.predict"]], "predict() (rosenpy.model.ptrbfnnc.ptrbfnn method)": [[9, "rosenpy.model.ptrbfnnc.PTRBFNN.predict"]], "predict() (rosenpy.model.rp_nn.neuralnetwork method)": [[9, "rosenpy.model.rp_nn.NeuralNetwork.predict"]], "predict() (rosenpy.model.scffnn.scffnn method)": [[9, "rosenpy.model.scffnn.SCFFNN.predict"]], "rosenpy.model": [[9, "module-rosenpy.model"]], "rosenpy.model.cvffnn": [[9, "module-rosenpy.model.cvffnn"]], "rosenpy.model.cvrbfnn": [[9, "module-rosenpy.model.cvrbfnn"]], "rosenpy.model.fcrbfnn": [[9, "module-rosenpy.model.fcrbfnn"]], "rosenpy.model.ptrbfnnc": [[9, "module-rosenpy.model.ptrbfnnc"]], "rosenpy.model.rp_layer": [[9, "module-rosenpy.model.rp_layer"]], "rosenpy.model.rp_nn": [[9, "module-rosenpy.model.rp_nn"]], "rosenpy.model.rp_optimizer": [[9, "module-rosenpy.model.rp_optimizer"]], "rosenpy.model.scffnn": [[9, "module-rosenpy.model.scffnn"]], "set_module() (rosenpy.model.amsgrad method)": [[9, "rosenpy.model.AMSGrad.set_module"]], "set_module() (rosenpy.model.adam method)": [[9, "rosenpy.model.Adam.set_module"]], "set_module() (rosenpy.model.cvamsgrad method)": [[9, "rosenpy.model.CVAMSGrad.set_module"]], "set_module() (rosenpy.model.cvadam method)": [[9, "rosenpy.model.CVAdam.set_module"]], "set_module() (rosenpy.model.cvnadam method)": [[9, "rosenpy.model.CVNadam.set_module"]], "set_module() (rosenpy.model.gradientdescent method)": [[9, "rosenpy.model.GradientDescent.set_module"]], "set_module() (rosenpy.model.nadam method)": [[9, "rosenpy.model.Nadam.set_module"]], "set_module() (rosenpy.model.optimizer method)": [[9, "rosenpy.model.Optimizer.set_module"]], "set_module() (rosenpy.model.rp_optimizer.amsgrad method)": [[9, "rosenpy.model.rp_optimizer.AMSGrad.set_module"]], "set_module() (rosenpy.model.rp_optimizer.adagrad method)": [[9, "rosenpy.model.rp_optimizer.AdaGrad.set_module"]], "set_module() (rosenpy.model.rp_optimizer.adam method)": [[9, "rosenpy.model.rp_optimizer.Adam.set_module"]], "set_module() (rosenpy.model.rp_optimizer.adamax method)": [[9, "rosenpy.model.rp_optimizer.Adamax.set_module"]], "set_module() (rosenpy.model.rp_optimizer.cvamsgrad method)": [[9, "rosenpy.model.rp_optimizer.CVAMSGrad.set_module"]], "set_module() (rosenpy.model.rp_optimizer.cvadagrad method)": [[9, "rosenpy.model.rp_optimizer.CVAdaGrad.set_module"]], "set_module() (rosenpy.model.rp_optimizer.cvadam method)": [[9, "rosenpy.model.rp_optimizer.CVAdam.set_module"]], "set_module() (rosenpy.model.rp_optimizer.cvadamax method)": [[9, "rosenpy.model.rp_optimizer.CVAdamax.set_module"]], "set_module() (rosenpy.model.rp_optimizer.cvnadam method)": [[9, "rosenpy.model.rp_optimizer.CVNadam.set_module"]], "set_module() (rosenpy.model.rp_optimizer.cvrmsprop method)": [[9, "rosenpy.model.rp_optimizer.CVRMSprop.set_module"]], "set_module() (rosenpy.model.rp_optimizer.gradientdescent method)": [[9, "rosenpy.model.rp_optimizer.GradientDescent.set_module"]], "set_module() (rosenpy.model.rp_optimizer.nadam method)": [[9, "rosenpy.model.rp_optimizer.Nadam.set_module"]], "set_module() (rosenpy.model.rp_optimizer.optimizer method)": [[9, "rosenpy.model.rp_optimizer.Optimizer.set_module"]], "set_module() (rosenpy.model.rp_optimizer.rmsprop method)": [[9, "rosenpy.model.rp_optimizer.RMSprop.set_module"]], "set_module() (rosenpy.model.rp_optimizer.samsgrad method)": [[9, "rosenpy.model.rp_optimizer.SAMSGrad.set_module"]], "update_learning_rate() (rosenpy.model.cvffnn method)": [[9, "rosenpy.model.CVFFNN.update_learning_rate"]], "update_learning_rate() (rosenpy.model.cvrbfnn method)": [[9, "rosenpy.model.CVRBFNN.update_learning_rate"]], "update_learning_rate() (rosenpy.model.fcrbfnn method)": [[9, "rosenpy.model.FCRBFNN.update_learning_rate"]], "update_learning_rate() (rosenpy.model.neuralnetwork method)": [[9, "rosenpy.model.NeuralNetwork.update_learning_rate"]], "update_learning_rate() (rosenpy.model.scffnn method)": [[9, "rosenpy.model.SCFFNN.update_learning_rate"]], "update_learning_rate() (rosenpy.model.cvffnn.cvffnn method)": [[9, "rosenpy.model.cvffnn.CVFFNN.update_learning_rate"]], "update_learning_rate() (rosenpy.model.cvrbfnn.cvrbfnn method)": [[9, "rosenpy.model.cvrbfnn.CVRBFNN.update_learning_rate"]], "update_learning_rate() (rosenpy.model.fcrbfnn.fcrbfnn method)": [[9, "rosenpy.model.fcrbfnn.FCRBFNN.update_learning_rate"]], "update_learning_rate() (rosenpy.model.ptrbfnnc.ptrbfnn method)": [[9, "rosenpy.model.ptrbfnnc.PTRBFNN.update_learning_rate"]], "update_learning_rate() (rosenpy.model.rp_nn.neuralnetwork method)": [[9, "rosenpy.model.rp_nn.NeuralNetwork.update_learning_rate"]], "update_learning_rate() (rosenpy.model.scffnn.scffnn method)": [[9, "rosenpy.model.scffnn.SCFFNN.update_learning_rate"]], "update_parameters() (rosenpy.model.amsgrad method)": [[9, "rosenpy.model.AMSGrad.update_parameters"]], "update_parameters() (rosenpy.model.adam method)": [[9, "rosenpy.model.Adam.update_parameters"]], "update_parameters() (rosenpy.model.cvamsgrad method)": [[9, "rosenpy.model.CVAMSGrad.update_parameters"]], "update_parameters() (rosenpy.model.cvadam method)": [[9, "rosenpy.model.CVAdam.update_parameters"]], "update_parameters() (rosenpy.model.cvnadam method)": [[9, "rosenpy.model.CVNadam.update_parameters"]], "update_parameters() (rosenpy.model.gradientdescent method)": [[9, "rosenpy.model.GradientDescent.update_parameters"]], "update_parameters() (rosenpy.model.nadam method)": [[9, "rosenpy.model.Nadam.update_parameters"]], "update_parameters() (rosenpy.model.optimizer method)": [[9, "rosenpy.model.Optimizer.update_parameters"]], "update_parameters() (rosenpy.model.rp_optimizer.amsgrad method)": [[9, "rosenpy.model.rp_optimizer.AMSGrad.update_parameters"]], "update_parameters() (rosenpy.model.rp_optimizer.adagrad method)": [[9, "rosenpy.model.rp_optimizer.AdaGrad.update_parameters"]], "update_parameters() (rosenpy.model.rp_optimizer.adam method)": [[9, "rosenpy.model.rp_optimizer.Adam.update_parameters"]], "update_parameters() (rosenpy.model.rp_optimizer.adamax method)": [[9, "rosenpy.model.rp_optimizer.Adamax.update_parameters"]], "update_parameters() (rosenpy.model.rp_optimizer.cvamsgrad method)": [[9, "rosenpy.model.rp_optimizer.CVAMSGrad.update_parameters"]], "update_parameters() (rosenpy.model.rp_optimizer.cvadagrad method)": [[9, "rosenpy.model.rp_optimizer.CVAdaGrad.update_parameters"]], "update_parameters() (rosenpy.model.rp_optimizer.cvadam method)": [[9, "rosenpy.model.rp_optimizer.CVAdam.update_parameters"]], "update_parameters() (rosenpy.model.rp_optimizer.cvadamax method)": [[9, "rosenpy.model.rp_optimizer.CVAdamax.update_parameters"]], "update_parameters() (rosenpy.model.rp_optimizer.cvnadam method)": [[9, "rosenpy.model.rp_optimizer.CVNadam.update_parameters"]], "update_parameters() (rosenpy.model.rp_optimizer.cvrmsprop method)": [[9, "rosenpy.model.rp_optimizer.CVRMSprop.update_parameters"]], "update_parameters() (rosenpy.model.rp_optimizer.gradientdescent method)": [[9, "rosenpy.model.rp_optimizer.GradientDescent.update_parameters"]], "update_parameters() (rosenpy.model.rp_optimizer.nadam method)": [[9, "rosenpy.model.rp_optimizer.Nadam.update_parameters"]], "update_parameters() (rosenpy.model.rp_optimizer.optimizer method)": [[9, "rosenpy.model.rp_optimizer.Optimizer.update_parameters"]], "update_parameters() (rosenpy.model.rp_optimizer.rmsprop method)": [[9, "rosenpy.model.rp_optimizer.RMSprop.update_parameters"]], "update_parameters() (rosenpy.model.rp_optimizer.samsgrad method)": [[9, "rosenpy.model.rp_optimizer.SAMSGrad.update_parameters"]], "verify_input() (rosenpy.model.cvffnn method)": [[9, "rosenpy.model.CVFFNN.verify_input"]], "verify_input() (rosenpy.model.cvrbfnn method)": [[9, "rosenpy.model.CVRBFNN.verify_input"]], "verify_input() (rosenpy.model.fcrbfnn method)": [[9, "rosenpy.model.FCRBFNN.verify_input"]], "verify_input() (rosenpy.model.neuralnetwork method)": [[9, "rosenpy.model.NeuralNetwork.verify_input"]], "verify_input() (rosenpy.model.scffnn method)": [[9, "rosenpy.model.SCFFNN.verify_input"]], "verify_input() (rosenpy.model.cvffnn.cvffnn method)": [[9, "rosenpy.model.cvffnn.CVFFNN.verify_input"]], "verify_input() (rosenpy.model.cvrbfnn.cvrbfnn method)": [[9, "rosenpy.model.cvrbfnn.CVRBFNN.verify_input"]], "verify_input() (rosenpy.model.fcrbfnn.fcrbfnn method)": [[9, "rosenpy.model.fcrbfnn.FCRBFNN.verify_input"]], "verify_input() (rosenpy.model.ptrbfnnc.ptrbfnn method)": [[9, "rosenpy.model.ptrbfnnc.PTRBFNN.verify_input"]], "verify_input() (rosenpy.model.rp_nn.neuralnetwork method)": [[9, "rosenpy.model.rp_nn.NeuralNetwork.verify_input"]], "verify_input() (rosenpy.model.scffnn.scffnn method)": [[9, "rosenpy.model.scffnn.SCFFNN.verify_input"]], "acos() (in module rosenpy.utils.act_func)": [[10, "rosenpy.utils.act_func.acos"]], "asin() (in module rosenpy.utils.act_func)": [[10, "rosenpy.utils.act_func.asin"]], "asinh() (in module rosenpy.utils.act_func)": [[10, "rosenpy.utils.act_func.asinh"]], "atan() (in module rosenpy.utils.act_func)": [[10, "rosenpy.utils.act_func.atan"]], "atanh() (in module rosenpy.utils.act_func)": [[10, "rosenpy.utils.act_func.atanh"]], "batch_sequential() (in module rosenpy.utils.batch_gen_func)": [[10, "rosenpy.utils.batch_gen_func.batch_sequential"]], "batch_shuffle() (in module rosenpy.utils.batch_gen_func)": [[10, "rosenpy.utils.batch_gen_func.batch_shuffle"]], "classification_predictions() (in module rosenpy.utils.plot)": [[10, "rosenpy.utils.plot.classification_predictions"]], "dsa() (in module rosenpy.utils.plot)": [[10, "rosenpy.utils.plot.dsa"]], "exponential_decay() (in module rosenpy.utils.decay_func)": [[10, "rosenpy.utils.decay_func.exponential_decay"]], "glorot_normal() (in module rosenpy.utils.init_func)": [[10, "rosenpy.utils.init_func.glorot_normal"]], "glorot_uniform() (in module rosenpy.utils.init_func)": [[10, "rosenpy.utils.init_func.glorot_uniform"]], "l2_regularization() (in module rosenpy.utils.reg_func)": [[10, "rosenpy.utils.reg_func.l2_regularization"]], "linear() (in module rosenpy.utils.act_func)": [[10, "rosenpy.utils.act_func.linear"]], "make_spiral() (in module rosenpy.utils.plot)": [[10, "rosenpy.utils.plot.make_spiral"]], "mse() (in module rosenpy.utils.cost_func)": [[10, "rosenpy.utils.cost_func.mse"]], "none_decay() (in module rosenpy.utils.decay_func)": [[10, "rosenpy.utils.decay_func.none_decay"]], "ones() (in module rosenpy.utils.init_func)": [[10, "rosenpy.utils.init_func.ones"]], "ones_real() (in module rosenpy.utils.init_func)": [[10, "rosenpy.utils.init_func.ones_real"]], "opt_conv_ptrbf_weights() (in module rosenpy.utils.init_func)": [[10, "rosenpy.utils.init_func.opt_conv_ptrbf_weights"]], "opt_crbf_gamma() (in module rosenpy.utils.init_func)": [[10, "rosenpy.utils.init_func.opt_crbf_gamma"]], "opt_crbf_weights() (in module rosenpy.utils.init_func)": [[10, "rosenpy.utils.init_func.opt_crbf_weights"]], "opt_ptrbf_gamma() (in module rosenpy.utils.init_func)": [[10, "rosenpy.utils.init_func.opt_ptrbf_gamma"]], "opt_ptrbf_weights() (in module rosenpy.utils.init_func)": [[10, "rosenpy.utils.init_func.opt_ptrbf_weights"]], "random_normal() (in module rosenpy.utils.init_func)": [[10, "rosenpy.utils.init_func.random_normal"]], "random_uniform() (in module rosenpy.utils.init_func)": [[10, "rosenpy.utils.init_func.random_uniform"]], "rbf_default() (in module rosenpy.utils.init_func)": [[10, "rosenpy.utils.init_func.rbf_default"]], "rosenpy.utils": [[10, "module-rosenpy.utils"]], "rosenpy.utils.act_func": [[10, "module-rosenpy.utils.act_func"]], "rosenpy.utils.batch_gen_func": [[10, "module-rosenpy.utils.batch_gen_func"]], "rosenpy.utils.cost_func": [[10, "module-rosenpy.utils.cost_func"]], "rosenpy.utils.decay_func": [[10, "module-rosenpy.utils.decay_func"]], "rosenpy.utils.init_func": [[10, "module-rosenpy.utils.init_func"]], "rosenpy.utils.plot": [[10, "module-rosenpy.utils.plot"]], "rosenpy.utils.reg_func": [[10, "module-rosenpy.utils.reg_func"]], "rosenpy.utils.select_module": [[10, "module-rosenpy.utils.select_module"]], "rosenpy.utils.utils": [[10, "module-rosenpy.utils.utils"]], "ru_gamma_ptrbf() (in module rosenpy.utils.init_func)": [[10, "rosenpy.utils.init_func.ru_gamma_ptrbf"]], "ru_weights_ptrbf() (in module rosenpy.utils.init_func)": [[10, "rosenpy.utils.init_func.ru_weights_ptrbf"]], "sech() (in module rosenpy.utils.act_func)": [[10, "rosenpy.utils.act_func.sech"]], "select_module() (in module rosenpy.utils.select_module)": [[10, "rosenpy.utils.select_module.select_module"]], "sin() (in module rosenpy.utils.act_func)": [[10, "rosenpy.utils.act_func.sin"]], "sinh() (in module rosenpy.utils.act_func)": [[10, "rosenpy.utils.act_func.sinh"]], "split_complex() (in module rosenpy.utils.act_func)": [[10, "rosenpy.utils.act_func.split_complex"]], "split_set() (in module rosenpy.utils.utils)": [[10, "rosenpy.utils.utils.split_set"]], "staircase() (in module rosenpy.utils.decay_func)": [[10, "rosenpy.utils.decay_func.staircase"]], "tan() (in module rosenpy.utils.act_func)": [[10, "rosenpy.utils.act_func.tan"]], "tanh() (in module rosenpy.utils.act_func)": [[10, "rosenpy.utils.act_func.tanh"]], "time_based_decay() (in module rosenpy.utils.decay_func)": [[10, "rosenpy.utils.decay_func.time_based_decay"]], "zeros() (in module rosenpy.utils.init_func)": [[10, "rosenpy.utils.init_func.zeros"]], "zeros_real() (in module rosenpy.utils.init_func)": [[10, "rosenpy.utils.init_func.zeros_real"]]}})